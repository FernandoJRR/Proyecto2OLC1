/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,8],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,17],$V9=[1,18],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,21],$Vg=[1,30],$Vh=[2,14,18,21,25,26,32,36,37,38,39,40,41],$Vi=[2,7,8,14,18,21,24,25,26,32,36,37,38,39,40,41],$Vj=[1,52],$Vk=[1,55],$Vl=[1,51],$Vm=[1,53],$Vn=[1,54],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,61],$Vs=[14,27,46],$Vt=[1,68],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[14,20,28,29,52,53,54,61,62,63,64,65,66,67,68,69,70],$Vz=[20,28],$VA=[20,36,37,38,39,40],$VB=[14,20,28,29,52,61,62,63,64,65,66,67,68,69,70],$VC=[20,28,68,69,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"encabezado":4,"instrucciones":5,"fin":6,"EOF":7,"DEDENT_EOF":8,"importaciones":9,"importacion":10,"incerteza":11,"R_IMPORT":12,"NOMBRE_ARCHIVO":13,"SALTO":14,"R_INCERTEZA":15,"expresion":16,"instruccion":17,"R_MOSTRAR":18,"PAR_IZQ":19,"PAR_DER":20,"RMIENTRAS":21,"expresion_logica":22,"LLAVE_IZQ":23,"LLAVE_DER":24,"R_PARA":25,"VARIABLE_IDENTIFICADOR":26,"IGUAL":27,"PUNTO_COMA":28,"SUMA":29,"declaracion_variable":30,"declaracion_funcion":31,"R_SI":32,"RELSE":33,"tipo_dato":34,"lista_variables":35,"R_INT":36,"R_DOUBLE":37,"R_STRING":38,"R_BOOLEAN":39,"R_CHAR":40,"R_VOID":41,"declaracion_funciond":42,"DOS_PUNTOS":43,"parametros":44,"parametro":45,"COMA":46,"operadores":47,"IGUAL_SUMA":48,"IGUAL_RESTA":49,"IGUAL_MULTIPLICACION":50,"IGUAL_DIVISION":51,"RESTA":52,"MULTIPLICACION":53,"DIVISION":54,"INTEGER":55,"DOUBLE":56,"STRING":57,"CHAR":58,"BOOLEAN":59,"expresion_relacional":60,"MAYOR_QUE":61,"MENOR_QUE":62,"MAYOR_IGUAL_QUE":63,"MENOR_IGUAL_QUE":64,"IGUALDAD":65,"DIFERENCIA":66,"INCERTEZA":67,"AND":68,"XOR":69,"OR":70,"NOT":71,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",8:"DEDENT_EOF",9:"importaciones",12:"R_IMPORT",13:"NOMBRE_ARCHIVO",14:"SALTO",15:"R_INCERTEZA",18:"R_MOSTRAR",19:"PAR_IZQ",20:"PAR_DER",21:"RMIENTRAS",23:"LLAVE_IZQ",24:"LLAVE_DER",25:"R_PARA",26:"VARIABLE_IDENTIFICADOR",27:"IGUAL",28:"PUNTO_COMA",29:"SUMA",32:"R_SI",33:"RELSE",36:"R_INT",37:"R_DOUBLE",38:"R_STRING",39:"R_BOOLEAN",40:"R_CHAR",41:"R_VOID",43:"DOS_PUNTOS",46:"COMA",48:"IGUAL_SUMA",49:"IGUAL_RESTA",50:"IGUAL_MULTIPLICACION",51:"IGUAL_DIVISION",52:"RESTA",53:"MULTIPLICACION",54:"DIVISION",55:"INTEGER",56:"DOUBLE",57:"STRING",58:"CHAR",59:"BOOLEAN",61:"MAYOR_QUE",62:"MENOR_QUE",63:"MAYOR_IGUAL_QUE",64:"MENOR_IGUAL_QUE",65:"IGUALDAD",66:"DIFERENCIA",67:"INCERTEZA",68:"AND",69:"XOR",70:"OR",71:"NOT"},
productions_: [0,[3,3],[3,2],[3,1],[6,1],[6,1],[4,3],[4,2],[4,1],[10,3],[11,3],[5,2],[5,1],[5,2],[5,1],[17,5],[17,7],[17,15],[17,2],[17,2],[17,4],[17,7],[17,11],[17,2],[30,2],[30,4],[34,1],[34,1],[34,1],[34,1],[34,1],[31,2],[31,2],[42,4],[42,5],[44,2],[44,1],[45,2],[35,3],[35,1],[47,1],[47,1],[47,1],[47,1],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[22,3],[22,3],[22,3],[22,2],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 console.log("fin,eof parseado"); imprimirErrores(); return $$[$0-1]; 
break;
case 3:
 console.log("vacio, eof parseado"); 
break;
case 11:
 /*$$[$0-1].push($$[$0]); this.$ = $$[$0-1];*/console.log("instruccion terminada"); 
break;
case 12:
 /*this.$ = [$$[$0]];*/ console.log("instruccion terminada"); 
break;
case 13:
 /*this.$ = [$$[$0-1]];*/ console.log("salto ignorado"); 
break;
case 14:
 /*this.$ = [$$[$0]];*/ console.log("salto ignorado"); 
break;
case 15:
 this.$ = $$[$0-2];/*instruccionesAPI.nuevoImprimir($$[$0-2]);*/ console.log("output:"+$$[$0-2]); 
break;
case 16:
 this.$ = instruccionesAPI.nuevoMientras($$[$0-4], $$[$0-1]); 
break;
case 17:
 this.$ = instruccionesAPI.nuevoPara($$[$0-12],$$[$0-10],$$[$0-8],$$[$0-6],$$[$0-1]) 
break;
case 20:
 console.log("Asignacion:"+$$[$0-1]);/*this.$ = instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1]);*/ 
break;
case 21:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1]); 
break;
case 22:
 this.$ = instruccionesAPI.nuevoIf($$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 23:
 agregarErrorSintactico(yytext, this._$.first_line, this._$.first_column, "Instruccion declarada incorrectamente"); 
break;
case 24:
 imprimirDeclaracion($$[$0-1],$$[$0],null)/*this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], TIPO_DATO.NUMERO);*/ 
break;
case 25:
 imprimirDeclaracion($$[$0-3],$$[$0-2],$$[$0]);/*this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], TIPO_DATO.NUMERO);*/ 
break;
case 26: case 27: case 28: case 29: case 30: case 39: case 55:
 this.$ = $$[$0].toString(); 
break;
case 31:
 imprimirDeclaracionFuncion($$[$0-1].toString(), $$[$0]); 
break;
case 32:
 imprimirDeclaracionFuncion($$[$0-1], $$[$0]); 
break;
case 33:
 this.$ = $$[$0-3].toString(); 
break;
case 34:
 this.$ = $$[$0-4].toString(); 
break;
case 38:
 this.$ = $$[$0-2] +","+ $$[$0].toString(); 
break;
case 40:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.SUMA); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.RESTA); 
break;
case 42:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.MULTIPLICACION); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.DIVISION); 
break;
case 44:
 this.$ = "-("+$$[$0]+")";/*this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO);*/ 
break;
case 45:
 this.$ = $$[$0-2]+"+"+$$[$0];/*this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA);*/ 
break;
case 46:
 this.$ = $$[$0-2]+"-"+$$[$0];/*this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA);*/ 
break;
case 47:
 this.$ = $$[$0-2]+"*"+$$[$0];/*this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION);*/ 
break;
case 48:
 this.$ = $$[$0-2]+"/"+$$[$0];/*this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION);*/ 
break;
case 49:
 this.$ = "("+$$[$0-1]+")"; 
break;
case 50:
 this.$ = $$[$0].toString();/*this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO);*/ 
break;
case 51:
 this.$ = $$[$0].tostring();/*this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO);*/ 
break;
case 52:
 this.$ = $$[$0].toString();/*this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.VARIABLE_IDENTIFICADOR);*/ 
break;
case 53:
 this.$ = "\""+$$[$0].toString()+"\"";
break;
case 54:
 this.$ = "\'"+$$[$0].toString()+"\'";
break;
case 56:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 61: case 62:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL); 
break;
case 63: case 64:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 67:
 this.$ = $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:4,7:$V1,8:$V2,9:[1,5],10:6,12:$V3,14:$V4,17:7,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{1:[3]},{2:$V0,5:27,14:$V4,17:7,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{2:$V0,6:28,7:$V1,8:$V2,14:$Vg,17:29,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{1:[2,3]},{10:31,12:$V3},o($Vh,[2,8]),o($Vi,[2,12]),o($Vi,[2,14]),{1:[2,4]},{1:[2,5]},{13:[1,32]},{19:[1,33]},{19:[1,34]},{19:[1,35]},{14:[1,36]},{14:[1,37]},{27:[1,38]},{19:[1,39]},{14:[1,40]},{26:[1,43],35:41,42:42},{26:[1,45],42:44},{26:[2,26]},{26:[2,27]},{26:[2,28]},{26:[2,29]},{26:[2,30]},{2:$V0,6:46,7:$V1,8:$V2,14:$Vg,17:29,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{1:[2,2]},o($Vi,[2,11]),o($Vi,[2,13]),o($Vh,[2,7],{11:47,15:[1,48]}),{14:[1,49]},{16:50,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:62,19:$Vj,22:59,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:60,71:$Vr},{26:[1,63]},o($Vi,[2,18]),o($Vi,[2,19]),{16:64,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:62,19:$Vj,22:65,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:60,71:$Vr},o($Vi,[2,23]),{14:[2,24],27:[1,66],46:[1,67]},{14:[2,32]},o($Vs,[2,39],{19:$Vt}),{14:[2,31]},{19:$Vt},{1:[2,1]},o($Vh,[2,6]),{16:69,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},o([2,14,15,18,21,25,26,32,36,37,38,39,40,41],[2,9]),{20:[1,70],29:$Vu,52:$Vv,53:$Vw,54:$Vx},{16:75,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:76,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},o($Vy,[2,50]),o($Vy,[2,51]),o($Vy,[2,52]),o($Vy,[2,53]),o($Vy,[2,54]),o($Vy,[2,55]),{20:[1,77]},o($Vz,[2,67],{68:[1,78],69:[1,79],70:[1,80]}),{16:62,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:81},{29:$Vu,52:$Vv,53:$Vw,54:$Vx,61:[1,82],62:[1,83],63:[1,84],64:[1,85],65:[1,86],66:[1,87],67:[1,88]},{27:[1,89]},{14:[1,90],29:$Vu,52:$Vv,53:$Vw,54:$Vx},{20:[1,91]},{16:92,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{26:[1,93]},{20:[1,94],34:97,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,44:95,45:96},{14:[1,98],29:$Vu,52:$Vv,53:$Vw,54:$Vx},{14:[1,99]},{16:100,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:101,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:102,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:103,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},o($Vy,[2,44]),{20:[1,104],29:$Vu,52:$Vv,53:$Vw,54:$Vx},{23:[1,105]},{16:62,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:106},{16:62,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:107},{16:62,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:108},o($Vz,[2,66]),{16:109,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:110,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:111,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:112,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:113,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:114,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:115,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{16:116,19:$Vj,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},o($Vi,[2,20]),{23:[1,117]},{14:[2,25],29:$Vu,52:$Vv,53:$Vw,54:$Vx},o($Vs,[2,38]),{43:[1,118]},{20:[1,119],34:97,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,45:120},o($VA,[2,36]),{26:[1,121]},o($Vh,[2,10]),o($Vi,[2,15]),o($VB,[2,45],{53:$Vw,54:$Vx}),o($VB,[2,46],{53:$Vw,54:$Vx}),o($Vy,[2,47]),o($Vy,[2,48]),o($Vy,[2,49]),{2:$V0,5:122,14:$V4,17:7,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},o($Vz,[2,63]),o($Vz,[2,64]),o($Vz,[2,65]),o($VC,[2,56],{29:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VC,[2,57],{29:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VC,[2,58],{29:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VC,[2,59],{29:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VC,[2,60],{29:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VC,[2,61],{29:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VC,[2,62],{29:$Vu,52:$Vv,53:$Vw,54:$Vx}),{28:[1,123],29:$Vu,52:$Vv,53:$Vw,54:$Vx},{2:$V0,5:124,14:$V4,17:7,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{14:[2,33]},{43:[1,125]},o($VA,[2,35]),o($VA,[2,37]),{2:$V0,14:$Vg,17:29,18:$V5,21:$V6,24:[1,126],25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{16:62,19:$Vj,22:127,26:$Vk,52:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:60,71:$Vr},{2:$V0,14:$Vg,17:29,18:$V5,21:$V6,24:[1,128],25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{14:[2,34]},o($Vi,[2,16]),{28:[1,129]},o($Vi,[2,21],{33:[1,130]}),{26:[1,131]},{23:[1,132]},{29:[1,133]},{2:$V0,5:134,14:$V4,17:7,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{29:[1,135]},{2:$V0,14:$Vg,17:29,18:$V5,21:$V6,24:[1,136],25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{20:[1,137]},o($Vi,[2,22]),{23:[1,138]},{2:$V0,5:139,14:$V4,17:7,18:$V5,21:$V6,25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},{2:$V0,14:$Vg,17:29,18:$V5,21:$V6,24:[1,140],25:$V7,26:$V8,30:15,31:16,32:$V9,34:20,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf},o($Vi,[2,17])],
defaultActions: {4:[2,3],9:[2,4],10:[2,5],22:[2,26],23:[2,27],24:[2,28],25:[2,29],26:[2,30],28:[2,2],42:[2,32],44:[2,31],46:[2,1],118:[2,33],125:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


const { ErrorList } = require('./manejo_error/ErrorList');
let listaErrores = new ErrorList();

var stack = []; //Integer stack para guardar indentaciones encontradas

	/*
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para obtener el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	*/

    function agregarErrorSintactico(lexema, linea, columna, descripcion){
        listaErrores.agregarErrorParametros(lexema, linea, columna, descripcion);

    }
    
    function imprimirDeclaracion(tipo,variables,expresion){
        let retorno = "Var -> Tipo:"+tipo+"|Declaracion:"+variables;
        if(expresion!==null){
            retorno += "|Expreion:"+expresion;
        }
        console.log(retorno);
    }
	
	function imprimirDeclaracionFuncion(tipo, id){
        let retorno = "Func -> Tipo:"+tipo+"|Identificador:"+id;
        console.log(retorno);
	}
    
    function imprimirErrores(){
        console.log("Errores Encontrados:");
        console.log(listaErrores.toString());
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var num_tab; //Nivel de indentacion - tabulacion
var prevIndent;  //Size stack temporal
var dedent; //Actual deindentacion
var flag = 0;

var IdentifierList= new Map(); //Integer,String
var NumericList= new Map(); //Integer,String
var charBuffer = [];
var stringBuffer = [];

function agregarErrorLexico(descripcion){
    listaErrores.agregarErrorParametros(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,descripcion);
}

function returnToken(TipoToken){
    var llaveToken = -1;

    for (const llave in Parser.prototype.terminals_) {
        if (Parser.prototype.terminals_[llave] === TipoToken) {
            llaveToken = llave;
            break;
        }
    }

	if(!(stack.length===0) && yy_.yylloc.first_column===0){ //Si la indentacion es mayor a 0 pero la columna actual es 0...
            console.log("Se dedenta completamente");
            this.less(yy_.yytext.length()); //...se guarda el lexema actual
            stack.pop(); //Se saca la indentacion anterior
            return 'DEDENT'; //Se retorna el token de dedentacion
    }    

    if (llaveToken != -1) {
        return llaveToken;
    } else {
        return TipoToken;
    }
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comentario_multilinea");
break;
case 1:this.popState(); console.log("Comentario multilinea"); // Comentario de multiples líneas
break;
case 2:this.popState(); console.log("Comentario multilinea"); // Comentario de multiples líneas
break;
case 3://Ignora el comentario
break;
case 4: console.log("comentario: " + yy_.yytext); 
break;
case 5:return returnToken('NOMBRE_ARCHIVO');
break;
case 6:return returnToken('R_IMPORT');
break;
case 7:return returnToken('R_INCERTEZA');
break;
case 8:return returnToken('R_MOSTRAR');
break;
case 9:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'R_D_AST';

break;
case 10:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'R_D_EXP';

break;
case 11:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'R_D_TS';

break;
case 12:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 32;

break;
case 13:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 33;

break;
case 14:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 25;

break;
case 15:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'RSWITCH';

break;
case 16:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'RCASE';

break;
case 17:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'RDEFAULT';

break;
case 18:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 37;

break;
case 19:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'RBREAK';

break;
case 20:console.log("Para detectado");return returnToken('R_PARA');
break;
case 21:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 21;

break;
case 22:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 37;

break;
case 23:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 39;

break;
case 24:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 38;

break;
case 25:console.log("KW Int detectada"); return returnToken('R_INT');
break;
case 26:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 40;

break;
case 27:	
        console.log("Void detectado");
        if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 41;

break;
case 28:return returnToken('COMA');
break;
case 29:return returnToken('PUNTO');
break;
case 30:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 43;

break;
case 31:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 28;

break;
case 32:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 23;

break;
case 33:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 24;

break;
case 34:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 19;

break;
case 35:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 20;

break;
case 36:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 48;

break;
case 37:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 49;

break;
case 38:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 50;

break;
case 39:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 51;

break;
case 40:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 68;

break;
case 41:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 70;

break;
case 42:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 29;

break;
case 43:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 52;

break;
case 44:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 53;

break;
case 45:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 54;

break;
case 46:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'MODULO';

break;
case 47:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        return 'POTENCIA';

break;
case 48:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 64;

break;
case 49:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 63;

break;
case 50:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 65;

break;
case 51:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 66;

break;
case 52:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 69;

break;
case 53:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 62;

break;
case 54:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 61;

break;
case 55:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 27;

break;
case 56:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 67;

break;
case 57:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 71;

break;
case 58:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
    return 59;

break;
case 59: console.log("salto");return 14; 
break;
case 60:	

    /*
        Si se encuentra una tabulacion(o 4 espacios) se comprobara si esta esta al inicio de la columna
        para determinar si es ignorada(es una tabulacion en medio del archivo) o si representa una indentacion significativa
    */
    console.log("indentacion");
    if(yy_.yylloc.first_column===0){
        this.num_tab=1; //Si es sinificativa el numero de indentaciones se vuelve 1
        this.flag=1;
        console.log("Indentacion detectada");
        this.pushState('indentacion_estado'); //Se empieza el estado de indentaciones
    } else {
        console.log("Indentacion ignorada");
    }

break;
case 61:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
                        this.less(yy_.yytext.length()); 
                        stack.pop();
                        return 'DEDENT';
 					}
 					NumericList.set(yy_.yytext.hashCode,yy_.yytext);
					return 56;

break;
case 62: 	if(!(stack.length===0) && yy_.yylloc.first_column===0){
                    this.less(yy_.yytext.length()); 
                    stack.pop();
                    return 'DEDENT';
 				}     	
				NumericList.set(yy_.yytext.hashCode,yy_.yytext);
				return 55;

break;
case 63: 	
                    console.log("Var_ID detectado:"+yy_.yytext);
                    if(!(stack.length===0) && yy_.yylloc.first_column===0){
                        this.less(yy_.yytext.length()); 
                        stack.pop();
                        return 'DEDENT';
 					}     
					IdentifierList.set(yy_.yytext.hashCode,yy_.yytext);
					return 26;

break;
case 64: /* Se ignoran los espacios en blanco */ 
break;
case 65:this.charBuffer = []; this.pushState('char_estado'); console.log("char iniciado");
break;
case 66:this.charBuffer.push(yy_.yytext);console.log("char:"+yy_.yytext); if(this.charBuffer.length > 1) { agregarErrorLexico("CHAR solo puede estar compuesto por un caracter"); }
break;
case 67:this.charBuffer.push("\n");console.log("escape:n");
break;
case 68:this.charBuffer.push("\t");console.log("escape:t");
break;
case 69:this.charBuffer.push("\r");console.log("escape:r");
break;
case 70:yy_.yytext = this.charBuffer.join(''); this.pushState('INITIAL'); return 58;
break;
case 71:this.stringBuffer = []; this.pushState('string_estado');
break;
case 72:this.stringBuffer.push(yy_.yytext);
break;
case 73:this.stringBuffer.push("\n");
break;
case 74:this.stringBuffer.push("\r");
break;
case 75:this.stringBuffer.push("\t");
break;
case 76:yy_.yytext = this.stringBuffer.join(''); this.pushState('INITIAL'); return 57;
break;
case 77:agregarErrorLexico("Salto de linea en string"); this.pushState('INITIAL'); return 14;
break;
case 78: 
        console.log("eof detectado");
        if(stack.length===0) { 
            console.log("eof retornado");
            return 7;
        } else {
            console.log("eof dedenta");
            stack.pop();
            return 8;
        }

break;
case 79: agregarErrorLexico("Caracter/es no definidos") 
break;
case 80: this.num_tab++; console.log("Indentacion aumentada")
break;
case 81:

            console.log("primerCheck:");
            console.log(stack);
            console.log(this.prevIndent);
            console.log(this.num_tab);
            //Se checkea si no se realizaron indentaciones previas
            if((stack.length===0)){
                console.log("No hay indentacion previa");
                this.prevIndent = 0; //Si no se realizaron indentaciones la indentacion anterior es de 0
            } else { 
                console.log("Hay indentacion previa");
                this.prevIndent = stack[stack.length-1]; //Si se realizaron, se toma el size de la indentacion anterior
            }
            
            console.log("segundoCheck:");
            console.log(stack);
            console.log(this.prevIndent);
            console.log(this.num_tab);
            //Se comprueba si la cantidad de indentacion aumento, decrecio o no hubo cambio (y tambien si existe algo inesperado)
            if(this.prevIndent < this.num_tab && this.flag==1){ //Si la indentacion aumento	

                console.log("Indentacion aumento respecto a la anterior");
                this.pushState('INITIAL'); //Se vuelve al estado inicial
                this.less(0); //Se guarda el caracter de tabulacion
                console.log(yy_.yytext)
                stack.push(this.num_tab); //Se guarda la indentacion actual para futura comprobacion
                console.log(stack);
                return 'INDENTACION'; //Se retorna el token de indentacion

            } else if (this.prevIndent > this.num_tab && !(stack.length===0)){ //Si la indentacion se redujo a algun valor mayor a 0
                console.log("Indentacion se redujo respecto a la anterior");
                this.flag = 0;
                this.less(0); //Se guarda el caracter de tabulacion
                stack.pop(); //Se expulsa la indentacion anterior
            
                return 'DEDENT'; //Se retorna el token de dedentacion
            } else if (this.prevIndent == this.num_tab ) { //Si la indentacion se mantuvo igual
                console.log("Indentacion se mantuvo respecto a la anterior");
                this.pushState('INITIAL'); //Se vuelve al estado inicial
                this.less(0); //Se guarda el caracter recibido
            } else { //Cualquier otra combinacion				
                console.log("Error en indentacion");
                this.pushState('INITIAL'); //Se vuelve al estado inicial
                this.less(0); //Se guarda el caracter
                agregarErrorLexico("No se esperaba Dedentacion"); //Se guarda el error
            }
            console.log("tercerCheck:");
            console.log(stack);
            console.log(this.prevIndent);
            console.log(this.num_tab);

break;
}
},
rules: [/^(?:''')/,/^(?:'''\n\s*?)/,/^(?:''')/,/^(?:[^']*)/,/^(?:(!!.*))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*)\.clr\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarExp\b)/,/^(?:DibujarTS\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:para\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:Double\b)/,/^(?:break\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:!&)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:!)/,/^(?:true|false\b)/,/^(?:(\n|\r))/,/^(?:(\t|    ))/,/^(?:(-?(([0-9])+\.([0-9])+|([0-9])+\.)))/,/^(?:([1-9]([0-9])*|0\b))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:([ \n\t]))/,/^(?:')/,/^(?:[^\\'\n])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:')/,/^(?:")/,/^(?:[^\\"\n]+)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:")/,/^(?:\n)/,/^(?:$)/,/^(?:.)/,/^(?:(\t|    ))/,/^(?:.)/],
conditions: {"string_estado":{"rules":[72,73,74,75,76,77],"inclusive":false},"char_estado":{"rules":[66,67,68,69,70],"inclusive":false},"comentario_multilinea":{"rules":[1,2,3],"inclusive":false},"indentacion_estado":{"rules":[80,81],"inclusive":false},"INITIAL":{"rules":[0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crl_parser;
exports.Parser = crl_parser.Parser;
exports.parse = function () { return crl_parser.parse.apply(crl_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}