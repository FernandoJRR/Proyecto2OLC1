/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,5],$V2=[1,9],$V3=[1,10],$V4=[1,18],$V5=[1,19],$V6=[1,22],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,21],$Vd=[1,23],$Ve=[1,33],$Vf=[2,8,9,27,28,29,30,31,32,33,56],$Vg=[1,38],$Vh=[2,7,8,9,27,28,29,30,31,32,33,56],$Vi=[2,7,8,9,13,16,27,28,29,30,31,32,33,56],$Vj=[1,67],$Vk=[1,64],$Vl=[1,68],$Vm=[1,62],$Vn=[1,63],$Vo=[1,65],$Vp=[1,66],$Vq=[1,69],$Vr=[1,70],$Vs=[1,77],$Vt=[27,28,29,30,31,32,40,42,43,44,45,46,47,48,49,52,53,56],$Vu=[1,95],$Vv=[1,98],$Vw=[1,99],$Vx=[1,100],$Vy=[1,101],$Vz=[1,102],$VA=[1,103],$VB=[1,104],$VC=[1,105],$VD=[1,106],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[1,110],$VI=[1,111],$VJ=[1,112],$VK=[1,113],$VL=[7,36,50,54,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VM=[7,26,54],$VN=[2,63],$VO=[1,120],$VP=[36,54],$VQ=[7,36,50,54,57,58],$VR=[7,36,50,54,57,58,61,62,63],$VS=[7,36,50,54,57,58,61,62,63,64,65,66,67,68,69,70,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"encabezado":4,"instrucciones":5,"fin":6,"SALTO":7,"EOF":8,"DEDENT_EOF":9,"importaciones":10,"incerteza":11,"importacion":12,"R_IMPORT":13,"NOMBRE_ARCHIVO":14,"incertezad":15,"R_INCERTEZA":16,"expresion_logica":17,"instruccion":18,"declaracion_variable":19,"declaracion_funcion":20,"asignacion":21,"indentaciones":22,"instruccion_funcion":23,"tipo_dato":24,"lista_variables":25,"IGUAL":26,"VARIABLE_IDENTIFICADOR":27,"R_INT":28,"R_DOUBLE":29,"R_STRING":30,"R_CHAR":31,"R_BOOLEAN":32,"R_VOID":33,"declaracion_funciond":34,"PAR_IZQ":35,"PAR_DER":36,"DOS_PUNTOS":37,"declaracion_parametros":38,"llamada_funcion":39,"R_MOSTRAR":40,"parametros_mostrar":41,"R_D_AST":42,"R_D_EXP":43,"R_D_TS":44,"R_RETORNO":45,"R_DETENER":46,"R_CONTINUAR":47,"R_MIENTRAS":48,"R_PARA":49,"PUNTO_COMA":50,"direccion_para":51,"R_SI":52,"R_SINO":53,"COMA":54,"STRING":55,"INDENTACION":56,"SUMA":57,"RESTA":58,"declaracion_parametro":59,"parametros":60,"MULTIPLICACION":61,"DIVISION":62,"MODULO":63,"POTENCIA":64,"MAYOR_QUE":65,"MENOR_QUE":66,"MAYOR_IGUAL_QUE":67,"MENOR_IGUAL_QUE":68,"IGUALDAD":69,"DIFERENCIA":70,"INCERTEZA":71,"AND":72,"XOR":73,"OR":74,"NOT":75,"INTEGER":76,"DOUBLE":77,"CHAR":78,"BOOLEAN":79,"$accept":0,"$end":1},
terminals_: {2:"error",7:"SALTO",8:"EOF",9:"DEDENT_EOF",13:"R_IMPORT",14:"NOMBRE_ARCHIVO",16:"R_INCERTEZA",26:"IGUAL",27:"VARIABLE_IDENTIFICADOR",28:"R_INT",29:"R_DOUBLE",30:"R_STRING",31:"R_CHAR",32:"R_BOOLEAN",33:"R_VOID",35:"PAR_IZQ",36:"PAR_DER",37:"DOS_PUNTOS",40:"R_MOSTRAR",42:"R_D_AST",43:"R_D_EXP",44:"R_D_TS",45:"R_RETORNO",46:"R_DETENER",47:"R_CONTINUAR",48:"R_MIENTRAS",49:"R_PARA",50:"PUNTO_COMA",52:"R_SI",53:"R_SINO",54:"COMA",55:"STRING",56:"INDENTACION",57:"SUMA",58:"RESTA",61:"MULTIPLICACION",62:"DIVISION",63:"MODULO",64:"POTENCIA",65:"MAYOR_QUE",66:"MENOR_QUE",67:"MAYOR_IGUAL_QUE",68:"MENOR_IGUAL_QUE",69:"IGUALDAD",70:"DIFERENCIA",71:"INCERTEZA",72:"AND",73:"XOR",74:"OR",75:"NOT",76:"INTEGER",77:"DOUBLE",78:"CHAR",79:"BOOLEAN"},
productions_: [0,[3,3],[3,2],[3,2],[3,1],[3,2],[6,1],[6,1],[4,2],[4,1],[4,1],[10,2],[10,1],[10,2],[12,3],[11,2],[11,1],[15,3],[5,2],[5,1],[5,2],[18,2],[18,1],[18,2],[18,2],[18,2],[19,2],[19,4],[21,3],[24,1],[24,1],[24,1],[24,1],[24,1],[20,3],[20,3],[34,4],[34,5],[23,2],[23,2],[23,2],[23,5],[23,5],[23,5],[23,4],[23,2],[23,3],[23,2],[23,2],[23,6],[23,13],[23,6],[23,3],[41,3],[41,1],[22,2],[22,1],[51,2],[51,2],[38,3],[38,1],[59,2],[25,3],[25,1],[39,3],[39,4],[60,3],[60,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 3:
 if(funcionActual != undefined) {declararFuncion(funcionActual)} console.log("fin,eof parseado"); imprimirErrores(); return terminar(); 
break;
case 2:
 console.log("fin,eof parseado"); imprimirErrores(); return terminar(); 
break;
case 4:
 console.log("vacio, eof parseado"); return terminar(); 
break;
case 11: case 12:
 imprimirImportacion($$[$0]); 
break;
case 13:
 console.log("salto ignorado"); 
break;
case 14:
 this.$ = $$[$0-1].toString(); Parser.yy.ast.nuevaImportacion(Parser.yy.utilidades.nuevoTerminal($$[$0-1], _$[$0-1].first_line, _$[$0-1]. first_column), Parser.yy.listaErrores); 
break;
case 17:
 imprimirIncerteza($$[$0-1]); Parser.yy.ast.nuevaIncerteza($$[$0-1]); 
break;
case 18:
 /*$$[$0-1].push($$[$0]); this.$ = $$[$0-1];*/console.log("instruccion terminada"); 
break;
case 19:
 /*this.$ = [$$[$0]];*/ console.log("instruccion terminada"); 
break;
case 20:
 /*this.$ = [$$[$0-1]];*/ console.log("salto ignorado"); 
break;
case 21: case 23:
 if(funcionActual!=undefined){ declararFuncion(funcionActual); funcionActual = undefined;} Parser.yy.ast.nuevaInstruccion($$[$0-1]); 
break;
case 22:
 if(funcionActual == undefined){funcionActual = $$[$0]; console.log("se guarda funcion")} else { declararFuncion(funcionActual); funcionActual = $$[$0];}
break;
case 24:
 console.log("aquiinstruccion");if(esPrimerInstruccion){ esPrimerInstruccion=false; agregarPrimeraInstruccion($$[$0]);} else { accionStack($$[$0]);} 
break;
case 25:
 console.log("error "+this._$.first_line+" "+this._$.first_column);agregarErrorSintactico(yytext, this._$.first_line, this._$.first_column, "Instruccion declarada incorrectamente"); 
break;
case 26:
 this.$ = Parser.yy.utilidades.nuevaDeclaracionVariable($$[$0-1], Parser.yy.utilidades.nuevasVariables($$[$0])); 
break;
case 27:
 this.$ = Parser.yy.utilidades.nuevaDeclaracionVariable($$[$0-3], Parser.yy.utilidades.nuevasVariables($$[$0-2]), $$[$0]); 
break;
case 28:
 this.$ = Parser.yy.utilidades.nuevaAsignacion(Parser.yy.utilidades.nuevoTerminal($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column), $$[$0]); 
break;
case 29:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato($$[$0], _$[$0].first_line, _$[$0].first_column, 0); 
break;
case 30:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato($$[$0], _$[$0].first_line, _$[$0].first_column, 1); 
break;
case 31:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato($$[$0], _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 32:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato($$[$0], _$[$0].first_line, _$[$0].first_column, 3); 
break;
case 33:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato($$[$0], _$[$0].first_line, _$[$0].first_column, 4); 
break;
case 34:
 this.$ = crearDeclaracionFuncion(Parser.yy.utilidades.nuevoTerminalDato($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,5), $$[$0-1][0], $$[$0-1][1]); esPrimerInstruccion=true;
break;
case 35:
 this.$ = crearDeclaracionFuncion($$[$0-2], $$[$0-1][0], $$[$0-1][1]); esPrimerInstruccion=true;
break;
case 36:
 this.$ = crearParteFuncion( Parser.yy.utilidades.nuevoTerminal($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column), undefined ); 
break;
case 37:
 this.$ = crearParteFuncion( Parser.yy.utilidades.nuevoTerminal($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), $$[$0-2] ); 
break;
case 38: case 39:
 this.$ = $$[$0-1]; 
break;
case 40:
 this.$ = $$[$0-1]; console.log("llamada realizada"); 
break;
case 41:
 this.$ = Parser.yy.utilidades.nuevaInstruccionMostrar(Parser.yy.utilidades.nuevosParametrosMostrar($$[$0-2])); 
break;
case 42:
 this.$ = Parser.yy.utilidades.nuevaInstruccionDibujarAST(Parser.yy.utilidades.nuevoTerminal($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)); 
break;
case 43:
 this.$ = Parser.yy.utilidades.nuevaInstruccionDibujarExpresion($$[$0-2]); 
break;
case 44:
 this.$ = Parser.yy.utilidades.nuevaInstruccionDibujarTabla(); 
break;
case 45:
 this.$ = Parser.yy.utilidades.nuevaInstruccionRetorno(Parser.yy.utilidades.nuevoTerminal($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 46:
 this.$ = Parser.yy.utilidades.nuevaInstruccionRetorno(Parser.yy.utilidades.nuevoTerminal($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column), $$[$0-1]); 
break;
case 47:
 this.$ = Parser.yy.utilidades.nuevaInstruccionDetener(Parser.yy.utilidades.nuevoTerminal($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 48:
 this.$ = Parser.yy.utilidades.nuevaInstruccionContinuar(Parser.yy.utilidades.nuevoTerminal($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 49:
 this.$ = Parser.yy.utilidades.nuevaInstruccionMientras($$[$0-3]); 
break;
case 50:
 this.$ = Parser.yy.utilidades.nuevaInstruccionPara(Parser.yy.utilidades.nuevaCondicionInicial(Parser.yy.utilidades.nuevoTerminal($$[$0-9], _$[$0-9].first_line, _$[$0-9].first_column), $$[$0-7]), $$[$0-5], $$[$0-3]); 
break;
case 51:
 this.$ = Parser.yy.utilidades.nuevaInstruccionSi($$[$0-3]); 
break;
case 52:
 this.$ = Parser.yy.utilidades.nuevaInstruccionSino(Parser.yy.utilidades.nuevoTerminal($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)); 
break;
case 53: case 59: case 66:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 54:
 let parametrosMostrar = []; parametrosMostrar.push(Parser.yy.utilidades.nuevoTerminalDato($$[$0], _$[$0].first_line, _$[$0].first_column, 2)); this.$ = parametrosMostrar; 
break;
case 55:
 indentacion_actual++; 
break;
case 56:
 indentacion_actual = 1; 
break;
case 57: case 58:
 this.$ = Parser.yy.utilidades.nuevoTerminal($$[$0-1]+$$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 60:
 let declaracionesParametros = []; declaracionesParametros.push($$[$0]); this.$ = declaracionesParametros; 
break;
case 61:
 this.$ = Parser.yy.utilidades.nuevaDeclaracionParametro($$[$0-1], Parser.yy.utilidades.nuevoTerminal($$[$0],_$[$0].first_line,_$[$0].first_column)); 
break;
case 62:
 $$[$0-2].push(Parser.yy.utilidades.nuevoTerminal($$[$0], _$[$0].first_line, _$[$0].first_column)); this.$ = $$[$0-2]; 
break;
case 63:
 let variables = []; variables.push(Parser.yy.utilidades.nuevoTerminal($$[$0], _$[$0].first_line, _$[$0].first_column)); this.$ = variables; 
break;
case 64:
 this.$ = Parser.yy.utilidades.nuevaLlamadaFuncion(Parser.yy.utilidades.nuevoTerminal($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)); 
break;
case 65:
 this.$ = Parser.yy.utilidades.nuevaLlamadaFuncion(Parser.yy.utilidades.nuevoTerminal($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column),Parser.yy.utilidades.nuevosParametros($$[$0-1])); 
break;
case 67:
 let parametro = []; parametro.push($$[$0]); this.$ = parametro; 
break;
case 68:
 this.$ = Parser.yy.utilidades.nuevaExpresion("SUMA", $$[$0-2], $$[$0]); 
break;
case 69:
 this.$ = Parser.yy.utilidades.nuevaExpresion("RESTA", $$[$0-2], $$[$0]); 
break;
case 70:
 this.$ = Parser.yy.utilidades.nuevaExpresion("MULTIPLICACION", $$[$0-2], $$[$0]); 
break;
case 71:
 this.$ = Parser.yy.utilidades.nuevaExpresion("DIVISION", $$[$0-2], $$[$0]); 
break;
case 72:
 this.$ = Parser.yy.utilidades.nuevaExpresion("MODULO", $$[$0-2], $$[$0]); 
break;
case 73:
 this.$ = Parser.yy.utilidades.nuevaExpresion("POTENCIA", $$[$0-2], $$[$0]); 
break;
case 74:
 this.$ = Parser.yy.utilidades.nuevaExpresion("MENOS_U", $$[$0]); 
break;
case 75:
 this.$ = Parser.yy.utilidades.nuevaExpresionRelacional("MAYOR_QUE", $$[$0-2], $$[$0]); 
break;
case 76:
 this.$ = Parser.yy.utilidades.nuevaExpresionRelacional("MENOR_QUE", $$[$0-2], $$[$0]); 
break;
case 77:
 this.$ = Parser.yy.utilidades.nuevaExpresionRelacional("MAYOR_IGUAL_QUE", $$[$0-2], $$[$0]); 
break;
case 78:
 this.$ = Parser.yy.utilidades.nuevaExpresionRelacional("MENOR_IGUAL_QUE", $$[$0-2], $$[$0]); 
break;
case 79:
 this.$ = Parser.yy.utilidades.nuevaExpresionRelacional("IGUALDAD", $$[$0-2], $$[$0]); 
break;
case 80:
 this.$ = Parser.yy.utilidades.nuevaExpresionRelacional("DIFERENCIA", $$[$0-2], $$[$0]); 
break;
case 81:
 this.$ = Parser.yy.utilidades.nuevaExpresionRelacional("INCERTEZA", $$[$0-2], $$[$0]); 
break;
case 82:
 this.$ = Parser.yy.utilidades.nuevaExpresionLogica("AND", $$[$0-2], $$[$0]);
break;
case 83:
 this.$ = Parser.yy.utilidades.nuevaExpresionLogica("XOR", $$[$0-2], $$[$0]);
break;
case 84:
 this.$ = Parser.yy.utilidades.nuevaExpresionLogica("OR", $$[$0-2], $$[$0]);
break;
case 85:
 this.$ = Parser.yy.utilidades.nuevaExpresionLogica("NOT", $$[$0]); 
break;
case 86:
 this.$ = Parser.yy.utilidades.nuevaExpresion("GRUPO", $$[$0-1]); 
break;
case 87:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato(yytext, this._$.first_line, this._$.first_column, 0); 
break;
case 88:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato(yytext, this._$.first_line, this._$.first_column, 1); 
break;
case 89:
 this.$ = Parser.yy.utilidades.nuevoTerminal(yytext, this._$.first_line, this._$.first_column); 
break;
case 90:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato(yytext, this._$.first_line, this._$.first_column, 2); 
break;
case 91:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato(yytext, this._$.first_line, this._$.first_column, 3); 
break;
case 92:
 this.$ = Parser.yy.utilidades.nuevoTerminalDato(yytext, this._$.first_line, this._$.first_column, 4); 
break;
case 93:
 this.$ = $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:4,7:$V1,8:$V2,9:$V3,10:6,11:7,12:11,13:$V4,15:12,16:$V5,18:8,19:13,20:14,21:15,22:16,24:20,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,56:$Vd},{1:[3]},{2:$V0,5:29,6:30,8:$V2,9:$V3,18:8,19:13,20:14,21:15,22:16,24:20,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,56:$Vd},{2:$V0,6:31,7:$Ve,8:$V2,9:$V3,18:32,19:13,20:14,21:15,22:16,24:20,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,56:$Vd},{1:[2,4]},{2:$V0,3:34,4:2,5:3,6:4,7:$V1,8:$V2,9:$V3,10:6,11:7,12:11,13:$V4,15:12,16:$V5,18:8,19:13,20:14,21:15,22:16,24:20,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,56:$Vd},o($Vf,[2,9],{15:12,11:35,12:36,7:[1,37],13:$V4,16:$V5}),o($Vf,[2,10],{7:$Vg}),o($Vh,[2,19]),{1:[2,6]},{1:[2,7]},o($Vi,[2,12]),o($Vh,[2,16]),{7:[1,39]},o($Vh,[2,22]),{7:[1,40]},{19:43,21:44,23:41,24:57,27:[1,58],28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,39:45,40:[1,46],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],52:[1,55],53:[1,56],56:[1,42]},{7:[1,59]},{14:[1,60]},{17:61,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{25:72,27:[1,74],34:73},{27:[1,76],34:75},{26:$Vs},o($Vt,[2,56]),{27:[2,29]},{27:[2,30]},{27:[2,31]},{27:[2,32]},{27:[2,33]},{2:$V0,6:78,7:$Ve,8:$V2,9:$V3,18:32,19:13,20:14,21:15,22:16,24:20,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,33:$Vc,56:$Vd},{1:[2,2]},{1:[2,3]},o($Vh,[2,18]),o($Vh,[2,20]),{1:[2,5]},o($Vf,[2,8],{7:$Vg}),o($Vi,[2,11]),o($Vi,[2,13]),o($Vh,[2,15]),o($Vh,[2,21]),o($Vh,[2,23]),o($Vh,[2,24]),o($Vt,[2,55]),{7:[1,79]},{7:[1,80]},{7:[1,81]},{35:[1,82]},{35:[1,83]},{35:[1,84]},{35:[1,85]},{7:[1,86],17:87,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{7:[1,88]},{7:[1,89]},{35:[1,90]},{35:[1,91]},{35:[1,92]},{37:[1,93]},{25:72,27:[1,94]},{26:$Vs,35:$Vu},o($Vh,[2,25]),{7:[1,96]},{7:[1,97],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{17:114,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:115,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:116,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},o($VL,[2,87]),o($VL,[2,88]),o($VL,[2,89],{35:$Vu}),o($VL,[2,90]),o($VL,[2,91]),o($VL,[2,92]),o($VL,[2,93]),{7:[2,26],26:[1,117],54:[1,118]},{7:[1,119]},o($VM,$VN,{35:$VO}),{7:[1,121]},{35:$VO},{17:122,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{1:[2,1]},o($Vh,[2,38]),o($Vh,[2,39]),o($Vh,[2,40]),{41:123,55:[1,124]},{27:[1,125]},{17:126,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{36:[1,127]},o($Vh,[2,45]),{7:[1,128],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},o($Vh,[2,47]),o($Vh,[2,48]),{17:129,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{28:[1,130]},{17:131,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{7:[1,132]},o($VM,$VN),{17:135,27:$Vj,35:$Vk,36:[1,133],39:71,55:$Vl,58:$Vm,60:134,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},o($Vi,[2,14]),o($Vh,[2,17]),{17:136,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:137,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:138,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:139,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:140,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:141,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:142,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:143,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:144,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:145,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:146,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:147,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:148,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:149,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:150,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{17:151,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},o([7,36,50,54,57,58,61,62,63,64],[2,74],{65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VL,[2,85]),{36:[1,152],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{17:153,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{27:[1,154]},o($Vh,[2,35]),{24:158,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,36:[1,155],38:156,59:157},o($Vh,[2,34]),{7:[2,28],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{36:[1,159],54:[1,160]},o($VP,[2,54]),{36:[1,161]},{36:[1,162],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{7:[1,163]},o($Vh,[2,46]),{36:[1,164],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{27:[1,165]},{36:[1,166],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},o($Vh,[2,52]),o($VL,[2,64]),{36:[1,167],54:[1,168]},o($VP,[2,67],{57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VQ,[2,68],{61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VQ,[2,69],{61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VR,[2,70],{64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VR,[2,71],{64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VR,[2,72],{64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VR,[2,73],{64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VS,[2,75],{72:$VI,73:$VJ,74:$VK}),o($VS,[2,76],{72:$VI,73:$VJ,74:$VK}),o($VS,[2,77],{72:$VI,73:$VJ,74:$VK}),o($VS,[2,78],{72:$VI,73:$VJ,74:$VK}),o($VS,[2,79],{72:$VI,73:$VJ,74:$VK}),o($VS,[2,80],{72:$VI,73:$VJ,74:$VK}),o($VS,[2,81],{72:$VI,73:$VJ,74:$VK}),o($VL,[2,82]),o([7,36,50,54,57,58,61,62,63,64,65,66,67,68,69,70,71,73,74],[2,83],{72:$VI}),o([7,36,50,54,57,58,61,62,63,64,65,66,67,68,69,70,71,74],[2,84],{72:$VI,73:$VJ}),o($VL,[2,86]),{7:[2,27],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},o($VM,[2,62]),{37:[1,169]},{36:[1,170],54:[1,171]},o($VP,[2,60]),{27:[1,172]},{7:[1,173]},{17:174,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{7:[1,175]},{7:[1,176]},o($Vh,[2,44]),{37:[1,177]},{26:[1,178]},{37:[1,179]},o($VL,[2,65]),{17:180,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{7:[2,36]},{37:[1,181]},{24:158,28:$V7,29:$V8,30:$V9,31:$Va,32:$Vb,59:182},o($VP,[2,61]),o($Vh,[2,41]),o($VP,[2,53],{57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($Vh,[2,42]),o($Vh,[2,43]),{7:[1,183]},{17:184,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{7:[1,185]},o($VP,[2,66],{57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),{7:[2,37]},o($VP,[2,59]),o($Vh,[2,49]),{50:[1,186],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},o($Vh,[2,51]),{17:187,27:$Vj,35:$Vk,39:71,55:$Vl,58:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr},{50:[1,188],57:$Vv,58:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK},{51:189,57:[1,190],58:[1,191]},{36:[1,192]},{57:[1,193]},{58:[1,194]},{37:[1,195]},{36:[2,57]},{36:[2,58]},{7:[1,196]},o($Vh,[2,50])],
defaultActions: {4:[2,4],9:[2,6],10:[2,7],24:[2,29],25:[2,30],26:[2,31],27:[2,32],28:[2,33],30:[2,2],31:[2,3],34:[2,5],78:[2,1],169:[2,36],181:[2,37],193:[2,57],194:[2,58]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


//const { ErrorList } = Parser.yy.manejoErrores;
let listaErrores;

var stack = []; //Integer stack para guardar indentaciones encontradas

var stack_instrucciones = []
var indentaciones_anteriores = []
var indentacion_actual = 0;

var indentaciones_continuas = 0;

var cuerpo_actual_funcion = "";
var instrucciones_funcion_actual = [];

var esPrimerInstruccion = true;

var funcionActual = undefined;

	/*
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para obtener el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	*/

    function agregarErrorSintactico(lexema, linea, columna, descripcion){
        Parser.yy.listaErrores.agregarErrorParametros(lexema, linea, columna, descripcion);
    }
	
	function imprimirImportacion(nombreArchivo){
		console.log("Importacion -> Archivo:"+nombreArchivo);
	}
	
	function imprimirIncerteza(expresionIncerteza){
		console.log("Incerteza -> Expresion:"+expresionIncerteza);
	}
    
    function imprimirDeclaracion(tipo,variables,expresion){
        let retorno = "Var -> Tipo:"+tipo+"|Declaracion:"+variables;
        if(expresion!==null){
            retorno += "|Expreion:"+expresion;
        }
        console.log(retorno + "\n");
    }
    
    function formatDeclaracion(tipo, variables, expresion){
        let retorno = "Var -> Tipo:"+tipo+"|Declaracion:"+variables;
        if(expresion!==null){
            retorno += "|Expreion:"+expresion;
        }
        return retorno + "\n";
    }
	
	function formatLlamadaFuncion(identificador, parametros){
		return "Llamada -> Identificador:"+identificador+"|Parametros:"+parametros+"\n";
	}
	
	function imprimirAsignacion(variable, expresion){
		console.log("Asignacion -> Variable:"+variable+"|Expresion:"+expresion);
	}
    
    function formatAsignacion(variable, expresion){
		return "Asignacion -> Variable:"+variable+"|Expresion:"+expresion+"\n";
    }
	
	function imprimirDeclaracionFuncion(tipo, id, parametros,cuerpo){
        let retorno = "Func -> Tipo:"+tipo+"|Identificador:"+id+"|Parametros["+parametros+"]";
		retorno += "\n\tCuerpo:\n" + cuerpo;
        console.log(retorno);
	}
	
    //Se ingresa la declaracion de una funcion sin sus posibles instrucciones internas, para estructurarlas
	function declararFuncion(declaracion_sin_cuerpo){

		//Se limpia el stack de instrucciones agregandolas a la funcion
		consumirStack(0);
        
		//imprimirDeclaracionFuncion(tipo, id, parametros, cuerpo_actual_funcion);
        
        //Se comprueba si existen instrucciones que anidar dentro de la funcion
        if(instrucciones_funcion_actual.length > 0){
            //Se crea el nodo no terminal con las instrucciones internas de la funcion
            let nodoInstrucciones = Parser.yy.utilidades.nuevasInstrucciones(instrucciones_funcion_actual, Parser.yy.listaErrores);
            declaracion_sin_cuerpo.agregarHijo(nodoInstrucciones);
        } 
        
        //Se agrega la declaracion al AST
        Parser.yy.ast.nuevaInstruccion(declaracion_sin_cuerpo);

		cuerpo_actual_funcion = "";
        instrucciones_funcion_actual = [];
        
	}
	
	function formatPara(variable,condicion,direccion){
		return "Para -> VarInicial:"+variable+"|Condicion:"+condicion+"|Direccion:"+direccion+"\n";
	}
    
    function formatSi(condicion){
        return "Si -> Condicion:"+condicion+"\n";
    }
    
    function formatMostrar(parametros){
        return "Mostrar -> Parametros:"+parametros+"\n";
    }
    
    function imprimirErrores(){
        console.log("\nErrores Encontrados:");
        console.log(Parser.yy.listaErrores.toString());
    }
    
    function agregarPrimeraInstruccion(instruccion){
        if(instruccion.tipoInstruccion == 14){
            agregarErrorSintactico("SINO", Parser.yy.utilidades.obtenerLineaNodo(instruccion), 0, "La instruccion SINO debe estar asociada a una instruccion SI");
        }

        stack_instrucciones.push(instruccion); 
        indentaciones_anteriores.push(indentacion_actual);
    }
	
	//Se decide que hacer con la instruccion obtenida mas reciente dependiendo de su indentacion
	function accionStack(instruccion){
		console.log("instr actual");
		console.log(instruccion);
        console.log("cosa"+stack_instrucciones.length)
        console.log(stack_instrucciones)

		let indentacion_anterior = indentaciones_anteriores[indentaciones_anteriores.length - 1];

		if ( indentacion_actual > indentacion_anterior ) { //En caso de que la indentacion de la instruccion obtenida sea mayor que la de la anterior
            if(instruccion.tipoInstruccion == 14){
                agregarErrorSintactico("SINO", Parser.yy.utilidades.obtenerLineaNodo(instruccion), 0, "La instruccion SINO debe estar asociada a una instruccion SI");
            }

			//Se agrega la instruccion y su indentacion al stack
			stack_instrucciones.push(instruccion);
			indentaciones_anteriores.push(indentacion_actual);

		} else if ( indentacion_actual === indentacion_anterior ) { //En caso de que la indentacion de la instruccion sea igual al de la instruccion anterior
        //NOTA: es necesario tomar el cuenta el caso especial de la instruccion SI, ya que esta puede esperar la instruccion SINO en la misma indentacion

            //Si la instruccion es un SINO con un SI anterior a ese se integrara el SINO dentro del SI y no se sacara al SI del stack
            if(stack_instrucciones[stack_instrucciones.length-1].tipoInstruccion==13 && instruccion.tipoInstruccion==14){
                console.log("Si y sino juntos")
            } else if(stack_instrucciones[stack_instrucciones.length-1].tipoInstruccion!=13 && instruccion.tipoInstruccion == 14){
                agregarErrorSintactico("SINO", Parser.yy.utilidades.obtenerLineaNodo(instruccion), 0, "La instruccion SINO debe estar asociada a una instruccion SI");
            }

			//La instruccion anterior es agregada a su instruccion padre
            //Se comprueba si la instruccion padre es una declaracion de funcion
            //Se comprueba si la instruccion padre acepta instrucciones anidadas
			if ( stack_instrucciones.length === 1 ) {
            //Si la instruccion padre es la declaracion de la funcion

                //Sacamos a la instruccion del stack
                let instruccion_anterior = stack_instrucciones.pop();
                
                //Agregamos la instruccion a la funcion
				cuerpo_actual_funcion += instruccion_anterior + "Fin scope " + instruccion_anterior.toString().split(' ')[0] + " stack vacio\n" ;
                instrucciones_funcion_actual.push(instruccion_anterior);
                
			} else {
            //Si la instruccion padre NO es la declaracion de la funcion
            console.log("stack");
            console.log(stack_instrucciones);
				
                //Sacamos a la instruccion y la indentacion de los stack
                let instruccion_anterior = stack_instrucciones.pop();

                console.log("instruccionanterior")
                console.log(instruccion_anterior)
                //Agregamos la instruccion a su instruccion padre
				//stack_instrucciones[stack_instrucciones.length-1] += instruccion_anterior  + "Fin scope " + instruccion_anterior.toString().split(" ")[0] + "\n";
                
                //Sacamos la instruccion padre para modificarla
                let instruccionPadre = stack_instrucciones.pop();
                console.log("instruccionpadre")
                console.log(instruccionPadre)
				instruccionPadre = agregarInstruccionAPadre(instruccionPadre, instruccion_anterior);
                console.log("instruccionpadre-post")
                console.log(instruccionPadre)
                stack_instrucciones.push(instruccionPadre);
			}
			
			stack_instrucciones.push(instruccion);
			
		} else if ( indentacion_actual < indentacion_anterior ) {   //En caso de que la indentacion de la instruccion obtenida sea menor a la de la anterior
            //console.log("indentacion menor: consumir stack");
        
            //Se consume el stack hasta que se encuente una instruccion con la misma indentacion o hasta vaciar el stack
            consumirStack(indentacion_actual);

            //Se pone en el stack la instruccion actual
            stack_instrucciones.push(instruccion);
            indentaciones_anteriores.push(indentacion_actual);
		}
		
	}
    
    function agregarInstruccionAPadre(padre, hijo){
        let tipoInstruccion = padre.tipoInstruccion;

        console.log("Tipo "+tipoInstruccion);
        console.log("Padre");
        console.log(padre);
        console.log("Hijo");
        console.log(hijo);
        //Se comprueba si la instruccion puede tener instrucciones anidadas, instrucciones 12-16
        if(tipoInstruccion >= 12 && tipoInstruccion <= 16){
            console.log("pasa");
            padre = Parser.yy.utilidades.agregarInstruccionAPadreInstruccion(padre, hijo, Parser.yy.listaErrores);
            console.log("Padre post")
            console.log(padre);
        } else {
            agregarErrorSintactico("INSTRUCCION", Parser.yy.utilidades.obtenerLineaNodo(hijo), 0, "No se esperaba indentacion");
        }
        return padre;
    }
	
    //Se consume el stack hasta que se encuentre una instruccion con la indentacion buscada
	function consumirStack(indentacionBuscada){
        /*
        console.log("indentacionbuscada "+indentacionBuscada);
        console.log("stack");
        console.log(stack_instrucciones);
        console.log("indentaciones anteriorres");
        console.log(indentaciones_anteriores);
        console.log(indentaciones_anteriores.length);
        */

        //Se guarda la indentacion mas reciente en el stack
		let temp_indentacion_actual = indentaciones_anteriores[indentaciones_anteriores.length - 1];			
        
        /*
        console.log("indentacion actual");
        console.log(temp_indentacion_actual);
        */



        //Se consumira el stack hasta que se encuentre una indentacion igual a la que se busca o se acabe el stack  
        //Las instrucciones encontradas seran instroducidas en su instruccion padre (si es posible) en el proceso
		while( ( temp_indentacion_actual >= indentacionBuscada ) && ( stack_instrucciones.length > 0 ) ) {

            //La instruccion anterior es agregada a su instruccion padre  (implica que el stack esta a punto de vaciarse)
            //Se comprueba si la instruccion padre es una declaracion de funcion
            //Se comprueba si su instruccion padre acepta instrucciones anidadas
            if ( stack_instrucciones.length === 1 ) {
                console.log("se consume");
                console.log(stack_instrucciones);
                
                //Se saca la instruccion y su indentacion del stack
                let temp_instruccion_anterior = stack_instrucciones.pop();
                indentaciones_anteriores.pop();

                //Se agrega la instruccion actual a la definicion de la funcion
                //let tipo_instruccion = temp_instruccion_anterior.toString().split(' ')[0];
                //cuerpo_actual_funcion += temp_instruccion_anterior + "Fin scope " + tipo_instruccion + " stack vacio\n" ;

                instrucciones_funcion_actual.push(temp_instruccion_anterior);
                
            } else {
                /*
                console.log("Agregado");
                */
                console.log("avanza");
                console.log(stack_instrucciones);

                //Se saca la instruccion y su indentacion del stack
                let temp_instruccion_anterior = stack_instrucciones.pop();
                indentaciones_anteriores.pop();

                //Se saca temporalmente la instruccion padre para su modificacion
                let temp = stack_instrucciones.pop();
                let tipo_instruccion = temp_instruccion_anterior.toString().split(' ')[0];

                /*
                console.log("temp");
                console.log(temp);
                console.log("instr anterior");
                console.log(temp_instruccion_anterior);
                console.log("tipo");
                console.log(tipo_instruccion);
                */

                //Se agrega la instruccion actual a su instruccion padre y se reintroduce al stack
                //temp += temp_instruccion_anterior + "Fin scope " + tipo_instruccion + "\n";
                
                temp = agregarInstruccionAPadre(temp, temp_instruccion_anterior);
                stack_instrucciones.push(temp);
            }
            
            //Se hace que la indentacion actual sea la indentacion mas reciente en el stack (undefined si se acabo el stack)
            temp_indentacion_actual = indentaciones_anteriores[indentaciones_anteriores.length - 1];			
            console.log(temp_indentacion_actual);
		}
	}
    
    function crearDeclaracionFuncion(tipo, identificador, parametros){
        console.log("se declara funcion")
        return Parser.yy.ast.nuevaDeclaracionFuncion(tipo, identificador, Parser.yy.utilidades.nuevaDeclaracionParametros(parametros)); 
    }
    
    function crearParteFuncion(identificador, parametros){
        let declaracion = [];
        declaracion.push(identificador);

        if(parametros != undefined){
            declaracion.push(parametros);
        }
        
        return declaracion;
    }
    
    function terminar(){
        stack = []; //Integer stack para guardar indentaciones encontradas

        stack_instrucciones = []
        indentaciones_anteriores = []
        indentacion_actual = 0;

        indentaciones_continuas = 0;

        cuerpo_actual_funcion = "";
        instrucciones_funcion_actual = [];

        esPrimerInstruccion = true;

        funcionActual = undefined;

        
        funcionActual = undefined
        if(Parser.yy.listaErrores.errores.length > 0){
            return {errores: Parser.yy.listaErrores.toString()};
        }
    }
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var num_tab; //Nivel de indentacion - tabulacion
var prevIndent;  //Size stack temporal
var dedent; //Actual deindentacion
var flag = 0;

var IdentifierList= new Map(); //Integer,String
var NumericList= new Map(); //Integer,String
var charBuffer = [];
var stringBuffer = [];

function agregarErrorLexico(descripcion){
    Parser.yy.listaErrores.agregarErrorParametros(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,descripcion);
}

function returnToken(TipoToken){
    var llaveToken = -1;

    for (const llave in Parser.prototype.terminals_) {
        if (Parser.prototype.terminals_[llave] === TipoToken) {
            llaveToken = llave;
            break;
        }
    }

	indentaciones_continuas = 0;
/*
	if(!(stack.length===0) && yy_.yylloc.first_column===0){ //Si la indentacion es mayor a 0 pero la columna actual es 0...
            console.log("Se dedenta completamente");
            this.less(yy_.yytext.length()); //...se guarda el lexema actual
            stack.pop(); //Se saca la indentacion anterior
            return 'DEDENT'; //Se retorna el token de dedentacion
    }    
*/	

    if (llaveToken != -1) {
        return llaveToken;
    } else {
        return TipoToken;
    }
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comentario_multilinea"); indentaciones_continuas = 0;
break;
case 1:this.popState(); console.log("Comentario multilinea "+indentaciones_continuas); // Comentario de multiples líneas
break;
case 2:this.popState();agregarErrorLexico("Fin de archivo en comentario sin cerrar"); return 9;
break;
case 3:// Comentario de multiples líneas
break;
case 4://Ignora el comentario 
break;
case 5: console.log("comentario: " + yy_.yytext);  //Se imprime comentario

break;
case 6:return returnToken('NOMBRE_ARCHIVO');
break;
case 7: agregarErrorLexico("El nombre del archivo no tiene extension '.crl' "); return returnToken('NOMBRE_ARCHIVO'); 
break;
case 8:return returnToken('R_IMPORT');
break;
case 9:return returnToken('R_INCERTEZA');
break;
case 10:return returnToken('R_MOSTRAR');
break;
case 11:console.log("dib ast enviado"); return returnToken('R_D_AST');
break;
case 12:return returnToken('R_D_EXP');
break;
case 13:return returnToken('R_D_TS');
break;
case 14:return returnToken('R_RETORNO')
break;
case 15:return returnToken('R_DETENER')
break;
case 16:return returnToken('R_CONTINUAR')
break;
case 17:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 29;

break;
case 18:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 'RBREAK';

break;
case 19:return returnToken('R_PARA');
break;
case 20:return returnToken('R_SI');
break;
case 21:return returnToken('R_SINO');
break;
case 22:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 48;

break;
case 23:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 29;

break;
case 24:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 32;

break;
case 25:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 30;

break;
case 26:console.log("KW Int detectada"); return returnToken('R_INT');
break;
case 27:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 31;

break;
case 28:	
        console.log("Void detectado");
        if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 33;

break;
case 29:return returnToken('COMA');
break;
case 30:return returnToken('PUNTO');
break;
case 31:return returnToken('DOS_PUNTOS');
break;
case 32:return returnToken('PUNTO_COMA');
break;
case 33:return returnToken('LLAVE_IZQ');
break;
case 34:return returnToken('LLAVE_DER');
break;
case 35:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        indentaciones_continuas = 0;
        console.log("par izquierdo");
        return 35;

break;
case 36:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
        indentaciones_continuas = 0;
        console.log("par derecho");
        return 36;

break;
case 37:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 'IGUAL_SUMA';

break;
case 38:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 'IGUAL_RESTA';

break;
case 39:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 'IGUAL_MULTIPLICACION';

break;
case 40:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 'IGUAL_DIVISION';

break;
case 41:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 72;

break;
case 42:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 74;

break;
case 43:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 57;

break;
case 44:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 58;

break;
case 45:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 61;

break;
case 46:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 62;

break;
case 47:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 63;

break;
case 48:	if(!(stack.length===0) && yy_.yylloc.first_column===0){
            this.less(yy_.yytext.length());
            stack.pop();
            return 'DEDENT';
        }    
	indentaciones_continuas = 0;
        return 64;

break;
case 49:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 68;

break;
case 50:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 67;

break;
case 51:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 69;

break;
case 52:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 70;

break;
case 53:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 73;

break;
case 54:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 66;

break;
case 55:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 65;

break;
case 56:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 26;

break;
case 57:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 71;

break;
case 58:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 75;

break;
case 59:
    if(!(stack.length===0) && yy_.yylloc.first_column===0) {
        this.less(yy_.yytext.length());
        stack.pop();
        return 'DEDENT';
    }
	indentaciones_continuas = 0;
    return 79;

break;
case 60:/*se ignora*/
break;
case 61: 
	
	//Se detecta si el salto deberia ser ignorado
    //Se ignora si es un salto al principio de la linea
	if(yy_.yylloc.first_column !== 0){
        console.log("salto enviado");
        indentaciones_continuas = 0;
        return 7; 
	}


break;
case 62:	
    /*
        Si se encuentra una tabulacion(o 4 espacios) se comprobara si esta esta al inicio de la columna
        para determinar si es ignorada(es una tabulacion en medio del archivo) o si representa una indentacion significativa
    */
    if(yy_.yylloc.first_column===0){
		indentaciones_continuas = 1;
        console.log("Indentacion detectada");
		return 56
    } else if ( indentaciones_continuas > 0 ) {
		indentaciones_continuas++;
        console.log("Indentacion detectada y aumentada");
		return 56;
    } else {
		indentaciones_continuas = 0;
        console.log("Indentacion ignorada");
	}

break;
case 63:console.log("double detectado"); return returnToken('DOUBLE');
break;
case 64: 	if(!(stack.length===0) && yy_.yylloc.first_column===0){
                    this.less(yy_.yytext.length()); 
                    stack.pop();
                    return 'DEDENT';
 				}     	
				NumericList.set(yy_.yytext.hashCode,yy_.yytext);
	indentaciones_continuas = 0;
				return 76;

break;
case 65: 	
                    console.log("Var_ID detectado:"+yy_.yytext);
                    if(!(stack.length===0) && yy_.yylloc.first_column===0){
                        this.less(yy_.yytext.length()); 
                        stack.pop();
                        return 'DEDENT';
 					}     
					indentaciones_continuas = 0;
					IdentifierList.set(yy_.yytext.hashCode,yy_.yytext);
					return 27;

break;
case 66: /* Se ignoran los espacios en blanco */ indentaciones_continuas = 0; 
break;
case 67:this.charBuffer = []; this.pushState('char_estado'); console.log("char iniciado");
break;
case 68:this.charBuffer.push(yy_.yytext);console.log("char:"+yy_.yytext); if(this.charBuffer.length > 1) { agregarErrorLexico("CHAR solo puede estar compuesto por un caracter"); }
break;
case 69:this.charBuffer.push("\n");console.log("escape:n");
break;
case 70:this.charBuffer.push("\t");console.log("escape:t");
break;
case 71:this.charBuffer.push("\r");console.log("escape:r");
break;
case 72:yy_.yytext = this.charBuffer.join(''); this.popState(); indentaciones_continuas = 0;return 78;
break;
case 73:agregarErrorLexico("Salto de linea en Char"); this.popState(); indentaciones_continuas = 0;return 7;
break;
case 74:agregarErrorLexico("Caracter/es no definidos");
break;
case 75:
        agregarErrorLexico("EOF en definicion de Char");
        console.log("eof detectado");
        if(stack.length===0) { 
            console.log("eof retornado");indentaciones_continuas = 0;
            return 8;
        } else {
            console.log("eof dedenta");
            stack.pop();
            return 9;
        }
    
break;
case 76:this.stringBuffer = []; this.pushState('string_estado');
break;
case 77:this.stringBuffer.push(yy_.yytext);
break;
case 78:this.stringBuffer.push("\n");
break;
case 79:this.stringBuffer.push("\r");
break;
case 80:this.stringBuffer.push("\t");
break;
case 81:yy_.yytext = this.stringBuffer.join(''); this.pushState('INITIAL'); indentaciones_continuas = 0;console.log("cadena");return 55;
break;
case 82:agregarErrorLexico("Salto de linea en String"); this.popState(); indentaciones_continuas = 0;return 7;
break;
case 83:agregarErrorLexico("Caracter/es no definidos");
break;
case 84:
        agregarErrorLexico("EOF en definicion de String");
        console.log("eof detectado");
        if(stack.length===0) { 
            console.log("eof retornado");indentaciones_continuas = 0;
            return 8;
        } else {
            console.log("eof dedenta");
            stack.pop();
            return 9;
        }
    
break;
case 85: indentaciones_continuas = 0;agregarErrorLexico("Caracter/es no definidos"); 
break;
case 86: 
        console.log("eof detectado");
        if(stack.length===0) { 
            console.log("eof retornado");indentaciones_continuas = 0;
            return 8;
        } else {
            console.log("eof dedenta");
            stack.pop();
            return 9;
        }

break;
case 87: this.num_tab++; console.log("Indentacion aumentada")
break;
case 88:

            console.log("primerCheck:");
            console.log(stack);
            console.log(this.prevIndent);
            console.log(this.num_tab);
            //Se checkea si no se realizaron indentaciones previas
            if((stack.length===0)){
                console.log("No hay indentacion previa");
                this.prevIndent = 0; //Si no se realizaron indentaciones la indentacion anterior es de 0
            } else { 
                console.log("Hay indentacion previa");
                this.prevIndent = stack[stack.length-1]; //Si se realizaron, se toma el size de la indentacion anterior
            }
            
            console.log("segundoCheck:");
            console.log(stack);
            console.log(this.prevIndent);
            console.log(this.num_tab);
            //Se comprueba si la cantidad de indentacion aumento, decrecio o no hubo cambio (y tambien si existe algo inesperado)
            if(this.prevIndent < this.num_tab && this.flag==1){ //Si la indentacion aumento	

                console.log("Indentacion aumento respecto a la anterior");
                this.pushState('INITIAL'); //Se vuelve al estado inicial
                this.less(0); //Se guarda el caracter de tabulacion
                stack.push(this.num_tab); //Se guarda la indentacion actual para futura comprobacion
                console.log(stack);
                return 56; //Se retorna el token de indentacion

            } else if (this.prevIndent > this.num_tab && !(stack.length===0)){ //Si la indentacion se redujo a algun valor mayor a 0
                console.log("Indentacion se redujo respecto a la anterior");
                this.flag = 0;
                this.less(0); //Se guarda el caracter de tabulacion
                stack.pop(); //Se expulsa la indentacion anterior
            
                return 'DEDENT'; //Se retorna el token de dedentacion
            } else if (this.prevIndent == this.num_tab ) { //Si la indentacion se mantuvo igual
                console.log("Indentacion se mantuvo respecto a la anterior");
                this.pushState('INITIAL'); //Se vuelve al estado inicial
                this.less(0); //Se guarda el caracter recibido
            } else { //Cualquier otra combinacion				
                console.log("Error en indentacion");
                this.pushState('INITIAL'); //Se vuelve al estado inicial
                this.less(0); //Se guarda el caracter
                agregarErrorLexico("No se esperaba Dedentacion"); //Se guarda el error
            }
            console.log("tercerCheck:");
            console.log(stack);
            console.log(this.prevIndent);
            console.log(this.num_tab);

break;
}
},
rules: [/^(?:''')/,/^(?:''')/,/^(?:$)/,/^(?:')/,/^(?:[^']*)/,/^(?:(!!.*))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*)\.crl\b)/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*)\..*)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:Retorno\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Double\b)/,/^(?:break\b)/,/^(?:Para\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Mientras\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|&)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:!)/,/^(?:true|false\b)/,/^(?:(\t|    )+(!!.*)?(\n|\r))/,/^(?:(\n|\r))/,/^(?:(\t|    ))/,/^(?:(-?(([0-9])+\.([0-9])+|([0-9])+\.)))/,/^(?:([1-9]([0-9])*|0\b))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:([ \n\t]))/,/^(?:')/,/^(?:[^\\'\n])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:')/,/^(?:\n)/,/^(?:.)/,/^(?:$)/,/^(?:")/,/^(?:[^\\"\n]+)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:")/,/^(?:\n)/,/^(?:.)/,/^(?:$)/,/^(?:.)/,/^(?:$)/,/^(?:(\t|    ))/,/^(?:.)/],
conditions: {"string_estado":{"rules":[77,78,79,80,81,82,83,84],"inclusive":false},"char_estado":{"rules":[68,69,70,71,72,73,74,75],"inclusive":false},"comentario_multilinea":{"rules":[1,2,3,4],"inclusive":false},"indentacion_estado":{"rules":[87,88],"inclusive":false},"INITIAL":{"rules":[0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crl_parser;
exports.Parser = crl_parser.Parser;
exports.parse = function () { return crl_parser.parse.apply(crl_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}